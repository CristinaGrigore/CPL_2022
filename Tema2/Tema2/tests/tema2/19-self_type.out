program
  class
    A
    attribute
      x
      SELF_TYPE
      self
    attribute
      u
      Int
    method
      h
      formal
        y
        SELF_TYPE
      SELF_TYPE
      block
        let
          local
            z
            SELF_TYPE
          +
            z
            1
        if
          true
          self
          x
        <-
          x
          if
            true
            self
            0
        <-
          x
          new
            SELF_TYPE
        <-
          u
          new
            SELF_TYPE
        0
    method
      f1
      SELF_TYPE
      self
    method
      f2
      A
      self
  class
    B
    A
    method
      g
      Int
      0
  class
    C
    B
    method
      i
      Object
      let
        local
          a
          A
          new
            B
        local
          b
          B
          new
            B
        block
          .
            a
            f1
          .
            a
            g
          .
            .
              a
              f1
            g
          .
            b
            f1
          .
            b
            g
          .
            .
              b
              f1
            g
          .
            b
            f2
          .
            b
            g
          .
            .
              b
              f2
            g
          <-
            b
            .
              b
              A
              f1
          .
            b
            A
            g
          .
            .
              b
              A
              f1
            g
          <-
            x
            .
              self
              f1
          <-
            x
            implicit dispatch
              f1
  class
    D
    C
    method
      f1
      SELF_TYPE
      new
        D
program
  class
    A
    attribute
      x
      SELF_TYPE
      self
    attribute
      u
      Int
    method
      h
      formal
        y
        SELF_TYPE
      SELF_TYPE
      block
        let
          local
            z
            SELF_TYPE
          +
            z
            1
        if
          true
          self
          x
        <-
          x
          if
            true
            self
            0
        <-
          x
          new
            SELF_TYPE
        <-
          u
          new
            SELF_TYPE
        0
    method
      f1
      SELF_TYPE
      self
    method
      f2
      A
      self
  class
    B
    A
    method
      g
      Int
      0
  class
    C
    B
    method
      i
      Object
      let
        local
          a
          A
          new
            B
        local
          b
          B
          new
            B
        block
          .
            a
            f1
          .
            a
            g
          .
            .
              a
              f1
            g
          .
            b
            f1
          .
            b
            g
          .
            .
              b
              f1
            g
          .
            b
            f2
          .
            b
            g
          .
            .
              b
              f2
            g
          <-
            b
            .
              b
              A
              f1
          .
            b
            A
            g
          .
            .
              b
              A
              f1
            g
          <-
            x
            .
              self
              f1
          <-
            x
            implicit dispatch
              f1
  class
    D
    C
    method
      f1
      SELF_TYPE
      new
        D
